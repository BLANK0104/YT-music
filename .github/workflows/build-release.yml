name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add permissions for GitHub token
permissions:
  contents: write
  discussions: write
  pull-requests: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: List build output
      run: dir dist
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          dist/*.exe
          dist/*.blockmap
        retention-days: 30
        
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-builds
        path: dist/
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.exe
          dist/*.blockmap
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  auto-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-builds
        path: dist/
        
    - name: Get version from package.json
      id: package-version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Check if release exists
      id: check-release
      run: |
        if gh release view "v${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate release description
      id: release-description
      run: |
        # Check if scripts directory exists and create fallback description
        if [ ! -d "scripts" ]; then
          echo "Scripts directory not found, creating fallback description..."
          # Create a simple fallback description
          echo "RELEASE_DESCRIPTION<<EOF" >> $GITHUB_OUTPUT
          echo "# 🎵 YouTube Music Desktop - Glass UI Edition v${{ steps.package-version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## ✨ What's New" >> $GITHUB_OUTPUT
          echo "- Latest build with enhanced features" >> $GITHUB_OUTPUT
          echo "- Glass UI with modern transparency effects" >> $GITHUB_OUTPUT
          echo "- Improved performance and stability" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 📦 Installation" >> $GITHUB_OUTPUT
          echo "1. Download the **.exe** installer below" >> $GITHUB_OUTPUT
          echo "2. Run the installer and follow the setup wizard" >> $GITHUB_OUTPUT
          echo "3. Launch YouTube Music Desktop from your desktop or start menu" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 🎨 Features" >> $GITHUB_OUTPUT
          echo "- 🎵 **Full YouTube Music Experience** - Complete desktop integration" >> $GITHUB_OUTPUT
          echo "- 🎨 **Glass UI Design** - Modern transparency and blur effects" >> $GITHUB_OUTPUT
          echo "- 🔊 **Audio Enhancements** - Built-in equalizer and audio processing" >> $GITHUB_OUTPUT
          echo "- 🎮 **Discord Integration** - Rich presence support" >> $GITHUB_OUTPUT
          echo "- 📱 **Mini Player** - Compact player mode" >> $GITHUB_OUTPUT
          echo "- ⚡ **Performance Optimized** - Fast and responsive interface" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 💾 System Requirements" >> $GITHUB_OUTPUT
          echo "- **OS:** Windows 10/11 (64-bit)" >> $GITHUB_OUTPUT
          echo "- **RAM:** 4GB minimum, 8GB recommended" >> $GITHUB_OUTPUT
          echo "- **Storage:** 150MB available space" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 🔗 Quick Links" >> $GITHUB_OUTPUT
          echo "- 📖 **Documentation:** Check the README.md file" >> $GITHUB_OUTPUT
          echo "- ⚙️ **Settings:** Press F1 or visit Settings → Help" >> $GITHUB_OUTPUT
          echo "- 🐛 **Issues:** Report bugs on GitHub Issues" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "---" >> $GITHUB_OUTPUT
          echo "*Built on $(date +'%Y-%m-%d') | Commit: ${GITHUB_SHA:0:7}*" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          cd scripts
          DESCRIPTION=$(node release-description.js)
          echo "RELEASE_DESCRIPTION<<EOF" >> $GITHUB_OUTPUT
          echo "$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_EVENT_HEAD_COMMIT_TIMESTAMP: ${{ github.event.head_commit.timestamp }}
        GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        
    - name: Create automatic release
      if: steps.check-release.outputs.exists == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ steps.package-version.outputs.version }}"
        name: "YouTube Music Desktop - Glass UI Edition v${{ steps.package-version.outputs.version }}"
        body: ${{ steps.release-description.outputs.RELEASE_DESCRIPTION }}
        files: |
          dist/*.exe
          dist/*.blockmap
        generate_release_notes: false
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
